% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quantiles.R
\name{compute_quantiles}
\alias{compute_quantiles}
\title{Computes and save a quantiles table of the POSIR process}
\usage{
compute_quantiles(
  Ntot,
  Batchsize,
  Ndis,
  deltagrid,
  gridname,
  alphagrid,
  maxmatrixsize,
  sim_root_dir = "",
  filenamebasis = "Table_quantiles.txt",
  NameBaseBatch = "Batch",
  precQ = floor(log10(Ntot)/2) + 2,
  d = 1,
  ErLev = 0.001
)
}
\arguments{
\item{Ntot}{initial number of trajectories planned to be simulated.}

\item{Batchsize}{number of trajectories simulated in each batch.}

\item{Ndis}{discretisation parameter of the POSIR process.}

\item{deltagrid}{grid for \eqn{\delta}.}

\item{gridname}{name of the grid for \eqn{\delta}.}

\item{alphagrid}{grid of values of the error level \eqn{\alpha}.}

\item{maxmatrixsize}{maximum number of i.i.d. random variables
to be simultaneously simulated.}

\item{sim_root_dir}{root directory of the simulations. Both "" and "."
stand for the current working directory.}

\item{filenamebasis}{file name for the quantile table (without the path).}

\item{NameBaseBatch}{prefix (beginning) of the file name for batches,
without the path. See \code{\link[=simulationDir]{simulationDir()}} for the directory used.}

\item{precQ}{how many decimals for the quantile estimations
(used in particular in exporting the table to a file).}

\item{d}{dimension parameter of the POSIR process (1 or 2).}

\item{ErLev}{tolerance level against which a number is considered an integer.}
}
\value{
A quantile table for the 1D or 2D POSIR process,
only if the quantile file does not already exist,
else the function returns NULL.
}
\description{
Computes and save Monte-Carlo estimations
of the quantiles of the 1D or 2D POSIR process,
only if the quantile file does not already exist.
}
\examples{
logger::log_info("Running examples for compute_quantiles()",
                 namespace = "posir")
sim_dir <- local_init_testing(do_multi = TRUE,
                              envir=sys.frame(sys.nframe()))
compute_quantiles(
  5000, 500, 100, seq(10, 1, -1) / 10,
  "de 1 à .1", seq(10, 1, -1) / 20, 10^6, sim_dir
)
future::plan(future::sequential)
compute_quantiles(100, 50, 100, seq(10, 1, -1) / 10,
  "de 1 à .1", seq(10, 1, -1) / 20, 10^6, sim_dir,
  d = 2
)
withr::deferred_run(envir=sys.frame(sys.nframe()))
}
\seealso{
\code{\link[=run_simu]{run_simu()}}, \code{\link[=extract_quantiles]{extract_quantiles()}}, \code{\link[=write_quantiles]{write_quantiles()}}, \code{\link[=compute_error_levels]{compute_error_levels()}}
}
